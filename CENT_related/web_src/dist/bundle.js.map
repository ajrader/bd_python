{
  "version": 3,
  "sources": [
    "..\\..\\..\\Users\\ms2h\\AppData\\Roaming\\npm\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js",
    "js/action/detailRouteAction.js",
    "js/action/initDataAction.js",
    "js/action/overviewRouteAction.js",
    "js/action/selectStateAction.js",
    "js/app.js",
    "js/appRouter.js",
    "js/component/appHeader.js",
    "js/component/dropdownChooser.js",
    "js/component/legend.js",
    "js/component/listChooser.js",
    "js/component/timeSlider.js",
    "js/component/toggleChooser.js",
    "js/core/dao.js",
    "js/core/emitter.js",
    "js/core/formatting.js",
    "js/core/router.js",
    "js/core/util.js",
    "js/model/coverageMdl.js",
    "js/model/dateRangeMdl.js",
    "js/model/detailDataMdl.js",
    "js/model/forecastMdl.js",
    "js/model/horizonMdl.js",
    "js/model/metricMdl.js",
    "js/model/overviewDataMdl.js",
    "js/model/periodMdl.js",
    "js/model/showSelectedChartMdl.js",
    "js/model/stateMdl.js",
    "js/model/stateViewMdl.js",
    "js/model/states.js",
    "js/model/statusMdl.js",
    "js/view/chartsArea.js",
    "js/view/dataColors.js",
    "js/view/detailPg.js",
    "js/view/overviewPg.js",
    "js/view/tableArea.js",
    "js/view/trendChart.js",
    "js/view/usMap.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar StateViewMdl = require('../model/stateViewMdl');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar SelectStateAction = require('./selectStateAction');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\n\r\nmodule.exports = {\r\n    exec: function(params) {\r\n        // set model to match params in the route, otherwise to default values\r\n\r\n        if(params.horizon) HorizonMdl.setHorizon(params.horizon);\r\n        else if(data) HorizonMdl.setHorizon(1);\r\n        \r\n        if(params.period) PeriodMdl.setPeriod(params.period);\r\n        else if(data) PeriodMdl.setPeriod('R12');\r\n        \r\n        var horizon = HorizonMdl.getHorizon();\r\n        var period = PeriodMdl.getPeriod();\r\n        \r\n        SelectStateAction.exec(horizon, period, params.state);\r\n        var data = OverviewDataMdl.getData();\r\n\r\n        if(params.coverage) CoverageMdl.setCoverage(params.coverage);\r\n        else if(data) CoverageMdl.setCoverage(data.coverages[0]);\r\n\r\n        if(params.view) StateViewMdl.setStateView(params.view);\r\n        else StateViewMdl.setStateView(StateViewMdl.ViewState.CHARTS);\r\n\r\n        // ensure other models are set to default values\r\n        if(data) {\r\n            MetricMdl.setMetric(data.metricsNames[0]);\r\n            DateRangeMdl.setRangeStart(data.startDate + data.numMonths - DateRangeMdl.getRangeSize());\r\n        }\r\n    }\r\n};",
    "\"use strict\";\nvar Dao = require('../core/dao');\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar StatusMdl = require('../model/statusMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\n\r\nvar processOverviewData = function(data) {\r\n    data.metricsNames = Object.keys(data.metrics);\r\n    var firstMetric = data.metricsNames[0];\r\n    //data.coverages = Object.keys(data.metrics[firstMetric]);\r\n    data.coverages = ['Injury', 'BI', 'UBI', 'WBI', 'PIP/MPC', 'MPC', 'PIP', 'Property', 'COLL', 'COMP', 'PD'];\r\n    var firstCoverage = data.coverages[0];\r\n    var states = Object.keys(data.metrics[firstMetric][firstCoverage]);\r\n    var firstState = states[0];\r\n    data.numMonths = data.metrics[firstMetric][firstCoverage][firstState].length;\r\n    data.startDate = (data.startYear - 1970) * 12 + data.startMonth; // #months since 1970\r\n    // if (PeriodMdl.getPeriod() == 'R12') data.startDate += 11;\r\n    data.startDateToShowOnTimeSlider = (2009 - 1970) * 12;\r\n    data.startDateOffset = data.startDateToShowOnTimeSlider - data.startDate;\r\n    if (data.startDateOffset < 0) data.startDateOffset = 0;\r\n    data.startDate += data.startDateOffset;\r\n    data.numMonths -= data.startDateOffset;\r\n    data.horizons = [1, 6, 12];\r\n    data.periods = ['R12', 'Monthly'];\r\n};\r\n\r\nmodule.exports = {\r\n    exec: function(horizon, period) {\r\n        Dao.getOverviewData(\r\n            horizon,\r\n            period,\r\n            function(data) {\r\n                processOverviewData(data);\r\n                OverviewDataMdl.setData(data);\r\n            },\r\n            function(err) {\r\n                console.log(err);\r\n                StatusMdl.setError(err);\r\n            }\r\n        );\r\n    }\r\n};",
    "\"use strict\";\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar SelectStateAction = require('./selectStateAction');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\n\r\nmodule.exports = {\r\n    exec: function(params) {\r\n\r\n        // set model to match params in the route, otherwise to default values\r\n    \r\n        SelectStateAction.exec(null, null, null);\r\n        var data = OverviewDataMdl.getData();\r\n\r\n        if(params.coverage) CoverageMdl.setCoverage(params.coverage);\r\n        else if(data) CoverageMdl.setCoverage(data.coverages[0]);\r\n\r\n        if(params.metric) MetricMdl.setMetric(params.metric);\r\n        else if(data) MetricMdl.setMetric(data.metricsNames[0]);\r\n        \r\n        if(params.horizon) HorizonMdl.setHorizon(params.horizon);\r\n        else if(data) HorizonMdl.setHorizon(1);\r\n        \r\n        if(params.period) PeriodMdl.setPeriod(params.period);\r\n        else if(data) PeriodMdl.setPeriod('R12');\r\n\r\n        if(params.dateRangeStart && params.dateRangeSz) {\r\n            DateRangeMdl.setRange(+params.dateRangeStart, +params.dateRangeSz);\r\n        } else if(data) {\r\n            DateRangeMdl.setRangeStart(data.startDate + data.numMonths - DateRangeMdl.getRangeSize());\r\n        }\r\n    }\r\n};",
    "\"use strict\";\nvar Dao = require('../core/dao');\r\nvar StateMdl = require('../model/stateMdl');\r\nvar DetailDataMdl = require('../model/detailDataMdl');\r\nvar StatusMdl = require('../model/statusMdl');\r\nvar States = require('../model/states');\r\n\r\nvar loadDetailData = function(horizon, period, state) {\r\n    Dao.getDetailData(\r\n        horizon,\r\n        period,\r\n        state.toUpperCase(),\r\n        function(data) {\r\n            DetailDataMdl.setData(data);\r\n        },\r\n        function(err) {\r\n            StatusMdl.setError(err);\r\n        }\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    exec: function(horizon, period, state) {\r\n        DetailDataMdl.setData(null);\r\n        StateMdl.setState(state);\r\n        if(state !== null) {\r\n            window.scrollTo(0,0);\r\n            loadDetailData(horizon, period, States[state]);\r\n        }\r\n    }\r\n};",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar OverviewPg = require('./view/overviewPg');\r\nvar DetailPg = require('./view/detailPg');\r\nvar AppRouter = require('./appRouter');\r\nvar StateMdl = require('./model/stateMdl');\r\nvar InitDataAction = require('./action/initDataAction');\r\nvar SelectStateAction = require('./action/selectStateAction');\r\nvar PeriodMdl = require('./model/periodMdl');\r\n\r\nvar App = React.createClass({displayName: 'App',\r\n\r\n    render: function() {\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div(null,  this.state.selectedState === null ? OverviewPg(null) : DetailPg(null))\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n    componentWillMount: function() {\r\n        StateMdl.onChange(this.onStateChange);\r\n        AppRouter.init();\r\n    },\r\n    componentDidMount: function() {\r\n        PeriodMdl.setPeriod('R12');\r\n        InitDataAction.exec(1, 'R12');\r\n    },\r\n    getInitialState: function() {\r\n        return {\r\n            selectedState: null\r\n        };\r\n    },\r\n    onStateChange: function() {\r\n        this.setState({\r\n            selectedState: StateMdl.getState()\r\n        });\r\n    }\r\n});\r\n\r\nReact.renderComponent(\r\n    /*jshint ignore:start */\r\n    App(null),\r\n    /*jshint ignore:end */\r\n    document.body\r\n);\r\n",
    "\"use strict\";\nvar Router = require('./core/router');\r\nvar OverviewRouteAction = require('./action/overviewRouteAction');\r\nvar DetailRouteAction = require('./action/detailRouteAction');\r\nvar CoverageMdl = require('./model/coverageMdl');\r\nvar MetricMdl = require('./model/metricMdl');\r\nvar DateRangeMdl = require('./model/dateRangeMdl');\r\nvar StateViewMdl = require('./model/stateViewMdl');\r\nvar StateMdl = require('./model/stateMdl');\r\nvar OverviewDataMdl = require('./model/overviewDataMdl');\r\nvar HorizonMdl = require('./model/horizonMdl');\r\nvar PeriodMdl = require('./model/periodMdl');\r\n\r\nvar routeChanging = false;\r\n\r\nvar routeChanged = function() {\r\n    routeChanging = true;\r\n\r\n    var route = Router.getRoute();\r\n\r\n    var paramStr = '';\r\n    var idx = route.indexOf('?');\r\n    if(idx > 0 && idx < route.length - 1) paramStr = route.slice(idx + 1);\r\n    var params = parseParams(decodeURI(paramStr));\r\n    if(route.indexOf('#/detail') === 0) DetailRouteAction.exec(params);\r\n    else if(route.indexOf('#/overview') === 0) OverviewRouteAction.exec(params);\r\n    else setTimeout(function() { redirectToDefault(); }, 1); // if not recognized, set to default route\r\n    routeChanging = false;\r\n};\r\n\r\nvar redirectToDefault = function() {\r\n    Router.setRoute('#/overview');\r\n    routeChanged();\r\n};\r\n\r\nvar dataLoaded = function() {\r\n    // when data is initially loaded, handle route change event again\r\n    if(Router.getRoute().startsWith('#/overview')) routeChanged();\r\n};\r\n\r\nvar parseParams = function(paramStr) {\r\n    var params = {};\r\n    paramStr.split('&').forEach(function(item) {\r\n        var queryParam = item.split('=');\r\n        params[queryParam[0]] = queryParam[1];\r\n    });\r\n    return params;\r\n};\r\n\r\nvar modelChanged = function() {\r\n    if(routeChanging) return;\r\n    var route = '';\r\n    var params = '';\r\n    if(StateMdl.getState()) {\r\n        route = '#/detail';\r\n        if(StateMdl.getState()) params += '&state=' + StateMdl.getState();\r\n        if(CoverageMdl.getCoverage()) params += '&coverage=' + CoverageMdl.getCoverage();\r\n        if(StateViewMdl.getStateView()) params += '&view=' + StateViewMdl.getStateView();\r\n        if(HorizonMdl.getHorizon()) params += '&horizon=' + HorizonMdl.getHorizon();\r\n        if(PeriodMdl.getPeriod()) params += '&period=' + PeriodMdl.getPeriod();\r\n    } else {\r\n        route = '#/overview';\r\n        if(CoverageMdl.getCoverage()) params += '&coverage=' + CoverageMdl.getCoverage();\r\n        if(MetricMdl.getMetric()) params += '&metric=' + MetricMdl.getMetric();\r\n        if(HorizonMdl.getHorizon()) params += '&horizon=' + HorizonMdl.getHorizon();\r\n        if(PeriodMdl.getPeriod()) params += '&period=' + PeriodMdl.getPeriod();\r\n        if(DateRangeMdl.getRangeStart() > 0) {\r\n            params += '&dateRangeStart=' + DateRangeMdl.getRangeStart();\r\n            params += '&dateRangeSz=' + DateRangeMdl.getRangeSize();\r\n        }\r\n    }\r\n    params = encodeURI(params);\r\n    if(params.length > 0) route += '?' + params.slice(1);\r\n    Router.setRoute(route);\r\n};\r\n\r\nmodule.exports = {\r\n    init: function() {\r\n        Router.onChange(routeChanged);\r\n        // when data initially loaded update models to match route, in case we need\r\n        // default values for some models\r\n        OverviewDataMdl.onChange(routeChanged);\r\n        CoverageMdl.onChange(modelChanged);\r\n        MetricMdl.onChange(modelChanged);\r\n        DateRangeMdl.onChange(modelChanged);\r\n        StateMdl.onChange(modelChanged);\r\n        StateViewMdl.onChange(modelChanged);\r\n        HorizonMdl.onChange(modelChanged);\r\n        PeriodMdl.onChange(modelChanged);\r\n        Router.start();\r\n        routeChanged();\r\n    }\r\n};\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nmodule.exports = React.createClass({displayName: 'AppHeader',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable.isRequired,\r\n        onShowAbout: React.PropTypes.func\r\n    },\r\n\r\n    render: function() {\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({className: \"apphdr\", id: this.props.id}, \r\n                React.DOM.p({className: \"apphdr-title\"}, this.props.title), \r\n                React.DOM.a({className: \"apphdr-about\", href: \"#\", onClick: this.showAbout}, \"About\")\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    showAbout: function() {\r\n        this.props.onShowAbout();\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nmodule.exports = React.createClass({displayName: 'DropdownChooser',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable,\r\n        items: React.PropTypes.arrayOf(React.PropTypes.renderable),\r\n        selectedItem: React.PropTypes.renderable,\r\n        onItemSelect: React.PropTypes.func\r\n    },\r\n\r\n    getDefaultProps: function() {\r\n        return {\r\n            items: [],\r\n            selectedItem: 'Click to Select'\r\n        };\r\n    },\r\n\r\n    // TODO: add key event handling (see Bootstrap dropdown)\r\n    // enter to show popup\r\n    // up/down arrow to traverse items\r\n    // enter to select item\r\n    // esc to close popup\r\n\r\n    render: function() {\r\n        var that = this;\r\n        var listItems = this.props.items.map(function(item) {\r\n            /*jshint ignore:start */\r\n            return React.DOM.li({className: \"ddchooser-item\", key: item, onClick: that.selectItem.bind(that, item)}, React.DOM.a({href: \"#\"}, item));\r\n            /*jshint ignore:end */\r\n        });\r\n\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: this.props.id}, \r\n                React.DOM.p({className: \"section-title\"}, this.props.title), \r\n                React.DOM.a({href: \"#\", className: \"ddchooser-toggle\", onClick: this.toggleExpand}, \r\n                    React.DOM.span({className: \"ddchooser-toggle-name\"}, this.props.selectedItem), \r\n                    React.DOM.span({className: \"ddchooser-toggle-icon fa fa-caret-down\"})\r\n                ), \r\n                React.DOM.ul({className: this.state.expanded ? 'ddchooser-popup' : 'ddchooser-popup hidden'}, listItems)\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            expanded: false\r\n        };\r\n    },\r\n    componentDidMount: function() {\r\n        window.addEventListener('click', this.globalClick);\r\n    },\r\n    componentWillUnmount: function() {\r\n        window.removeEventListener('click', this.globalClick);\r\n    },\r\n\r\n    toggleExpand: function(e) {\r\n        var newVal = !this.state.expanded;\r\n        this.setState({\r\n            expanded: newVal\r\n        });\r\n        return false;\r\n    },\r\n\r\n    globalClick: function(e) {\r\n        if(this.state.expanded) this.toggleExpand();\r\n    },\r\n\r\n    selectItem: function(item) {\r\n        this.setState({\r\n            expanded: false\r\n        });\r\n        this.props.onItemSelect(item);\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nmodule.exports = React.createClass({displayName: 'Legend',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable,\r\n        categories: React.PropTypes.arrayOf(React.PropTypes.shape(\r\n            {\r\n                name: React.PropTypes.renderable,\r\n                color: React.PropTypes.renderable,\r\n                borderColor: React.PropTypes.renderable\r\n            }  \r\n        )),\r\n        hasMargins: React.PropTypes.bool\r\n    },\r\n\r\n    getDefaultProps: function() {\r\n        return {\r\n            title: 'Legend',\r\n            categories: [],\r\n            hasMargins: true\r\n        };\r\n    },\r\n\r\n    render: function() {\r\n        if (this.props.hasMargins) {\r\n            \r\n            var categoryItems = this.props.categories.map(function(cat) {\r\n                var colorStyle = { background: cat.color, border: '1px solid ' + cat.borderColor };\r\n\r\n                /*jshint ignore:start */\r\n                return React.DOM.li({className: \"legend-item\", key: cat.name}, \r\n                    React.DOM.span({className: \"legend-color\", style: colorStyle}), \r\n                    React.DOM.span({className: \"legend-name\"}, cat.name)\r\n                )\r\n                /*jshint ignore:end */\r\n            });\r\n            return (\r\n                /*jshint ignore:start */\r\n                React.DOM.div({id: this.props.id}, \r\n                    React.DOM.p({className: \"section-title\"}, this.props.title), \r\n                    React.DOM.ul({className: \"legend-area\"}, categoryItems)\r\n                )\r\n                /*jshint ignore:end */\r\n            );\r\n            \r\n        } else {\r\n            \r\n            var categoryItems = [];\r\n            for (var i=0; i<this.props.categories.length; i++) {\r\n                var cat = this.props.categories[i];\r\n                var colorStyle = { background: cat.color, border: '1px solid ' + cat.borderColor };\r\n                \r\n                if (i==0) var className = 'legend-color-no-margin-top';\r\n                else if (i==this.props.categories.length-1) var className = 'legend-color-no-margin-bottom';\r\n                else var className = 'legend-color-no-margin-middle';\r\n                \r\n                categoryItems.push(\r\n                    /*jshint ignore:start */\r\n                    React.DOM.li({className: \"legend-item-no-margin\", key: cat.name}, \r\n                        React.DOM.span({className: className, style: colorStyle}), \r\n                        React.DOM.span({className: \"legend-name\"}, cat.name)\r\n                    )\r\n                    /*jshint ignore:end */\r\n                );\r\n            }\r\n            return (\r\n                /*jshint ignore:start */\r\n                React.DOM.div({id: this.props.id}, \r\n                    React.DOM.p({className: \"section-title\"}, this.props.title), \r\n                    React.DOM.ul({className: \"legend-area\"}, categoryItems)\r\n                )\r\n                /*jshint ignore:end */\r\n            );\r\n            \r\n        }\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nmodule.exports = React.createClass({displayName: 'ListChooser',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable,\r\n        items: React.PropTypes.arrayOf(React.PropTypes.renderable),\r\n        selectedItem: React.PropTypes.renderable,\r\n        onItemSelect: React.PropTypes.func\r\n    },\r\n\r\n    getDefaultProps: function() {\r\n        return {\r\n            items: []\r\n        };\r\n    },\r\n\r\n    render: function() {\r\n        var that = this;\r\n        \r\n        var listItems = this.props.items.map(function(item) {\r\n            \r\n            var segments = ['Injury', 'Property', 'PIP/MPC'];\r\n            var itemIsSegment = segments.indexOf(item) > -1;\r\n            \r\n            /*jshint ignore:start */\r\n            if(item === that.props.selectedItem) {\r\n                return React.DOM.li({className: \"listchooser-item-selected\", key: item}, \r\n                            itemIsSegment ? React.DOM.strong(null, item) : React.DOM.span(null, item)\r\n                       );\r\n            } else {\r\n                return React.DOM.li({className: \"listchooser-item\", key: item, onClick: that.selectItem.bind(that, item)}, \r\n                            itemIsSegment ? React.DOM.strong(null, item) : React.DOM.span(null, item)\r\n                       );\r\n            }\r\n            /*jshint ignore:end */\r\n        });\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: this.props.id}, \r\n                React.DOM.p({className: \"section-title\"}, this.props.title), \r\n                React.DOM.ul({className: \"listchooser-list\"}, listItems)\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    selectItem: function(item) {\r\n        this.props.onItemSelect(item);\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\r\n\r\nmodule.exports = React.createClass({displayName: 'TimeSlider',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        numMonths: React.PropTypes.number,\r\n        firstMonth: React.PropTypes.number,\r\n        rangeStart: React.PropTypes.number,\r\n        rangeSize: React.PropTypes.number,\r\n        onRangeChange: React.PropTypes.func\r\n    },\r\n\r\n    getDefaultProps: function() {\r\n        return {\r\n            numMonths: -1,\r\n            firstMonth: -1,\r\n            rangeStart: -1,\r\n            rangeSize: 1\r\n        };\r\n    },\r\n\r\n    render: function() {\r\n        var rangeTxt = 'Date Range';\r\n        if(this.props.rangeStart > 0) {\r\n            var startYr = 1970 + Math.floor(this.props.rangeStart / 12);\r\n            var rangeEnd = this.props.rangeStart + this.props.rangeSize - 1;\r\n            var endYr = 1970 + Math.floor(rangeEnd / 12);\r\n            rangeTxt = months[this.props.rangeStart % 12] + ' ' + startYr;\r\n        }\r\n\r\n        /*jshint ignore:start */\r\n\r\n        var yrSections = [];\r\n        var thumb = null;\r\n        if(this.props.numMonths && this.props.firstMonth) {\r\n            var sectionWidthPercent = 100 * 12 / this.props.numMonths;\r\n            for(var mo = this.props.firstMonth; mo < this.props.firstMonth + this.props.numMonths; mo++) {\r\n                if(mo % 12 === 0) { // January\r\n                    var offsetPercent = 100 * (mo - this.props.firstMonth) / this.props.numMonths;\r\n                    var sectionStyle = { left: offsetPercent + '%', width: sectionWidthPercent + '%' };\r\n                    var barStyle = {}\r\n                    if(mo === this.props.firstMonth) barStyle['border-left'] = 'none';\r\n\r\n                    yrSections.push(React.DOM.div({className: \"tslider-section\", key: mo, style: sectionStyle}, \r\n                        React.DOM.div({className: \"tslider-sectionbar\", style: barStyle}), \r\n                        React.DOM.p({className: \"tslider-sectiontxt\"}, 1970 + Math.floor(mo / 12))\r\n                    ));\r\n                } else if(mo % 3 === 0) { // April, July, October\r\n                    var offsetPercent = 100 * (mo - this.props.firstMonth) / this.props.numMonths;\r\n                    var sectionStyle = { left: offsetPercent + '%', width: sectionWidthPercent + '%' };\r\n                    var barStyle = {}\r\n                    if(mo === this.props.firstMonth) barStyle['border-left'] = 'none';\r\n\r\n                    yrSections.push(React.DOM.div({className: \"tslider-section\", key: mo, style: sectionStyle}, \r\n                        React.DOM.div({className: \"tslider-sectionbar-minor\", style: barStyle})\r\n                    ));\r\n                }                  \r\n            }\r\n\r\n            var thumbOffset = 100 * (this.props.rangeStart - this.props.firstMonth) / this.props.numMonths;\r\n            thumbOffset = Math.max(0, Math.min(100, thumbOffset));\r\n            var thumbWidth = 100 * this.props.rangeSize / this.props.numMonths;\r\n            thumbWidth = Math.max(0, Math.min(100 - thumbOffset, thumbWidth));\r\n            var thumbStyle = { left: thumbOffset + '%', width: 'calc(' + thumbWidth + '% + 1px)' };\r\n            thumb = React.DOM.div({className: \"tslider-thumb\", ref: \"thumb\", style: thumbStyle, onMouseDown: this.onMouseDown})\r\n        }\r\n        /*jshint ignore:end */\r\n\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: this.props.id}, \r\n                React.DOM.div({className: \"tslider-titlebar\"}, \r\n                    React.DOM.p({className: \"section-title tslider-title\"}, rangeTxt)\r\n                ), \r\n                React.DOM.div({className: \"tslider-content\", ref: \"track\", onMouseUp: this.onMouseUp, onMouseMove: this.onMouseMove, onMouseLeave: this.onMouseLeave}, \r\n                    yrSections, \r\n                    thumb\r\n                )\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            dragging: false,\r\n            delta: 0,\r\n            offsetPercent: 0\r\n        };\r\n    },\r\n\r\n    selectRangeSz: function(value) {\r\n        this.props.onRangeChange(this.props.rangeStart, value);\r\n        return false;\r\n    },\r\n\r\n    onMouseDown: function(e) {\r\n        if(e.button !== 0) return; // left button\r\n        var thumbOffset = this.refs.thumb.getDOMNode().getBoundingClientRect().left;\r\n        this.setState({\r\n            dragging: true,\r\n            delta: e.nativeEvent.pageX - thumbOffset\r\n        });\r\n        return false;\r\n    },\r\n    onMouseMove: function(e) {\r\n        if(!this.state.dragging) return;\r\n        var trackOffset = this.refs.track.getDOMNode().getBoundingClientRect().left;\r\n        var trackWidth = this.refs.track.getDOMNode().clientWidth;\r\n        var offset = e.nativeEvent.pageX - this.state.delta - trackOffset;\r\n        var offsetPercent = 100 * offset / trackWidth;\r\n        var nearestMonth = this.props.firstMonth + Math.round(offsetPercent * this.props.numMonths / 100);\r\n        nearestMonth = Math.max(this.props.firstMonth, Math.min(this.props.firstMonth + this.props.numMonths - 1, nearestMonth));\r\n        if(nearestMonth != this.props.rangeStart) this.props.onRangeChange(nearestMonth, this.props.rangeSize);\r\n        return false;\r\n    },\r\n    onMouseUp: function(e) {\r\n        if(this.state.dragging) {\r\n            this.setState({\r\n                dragging: false\r\n            });\r\n        } else {\r\n            var trackOffset = this.refs.track.getDOMNode().getBoundingClientRect().left;\r\n            var trackWidth = this.refs.track.getDOMNode().clientWidth;\r\n            var offset = e.nativeEvent.pageX - trackOffset;\r\n            var offsetPercent = 100 * offset / trackWidth;\r\n            var nearestMonth = this.props.firstMonth + Math.round(offsetPercent * this.props.numMonths / 100);\r\n            nearestMonth = Math.max(this.props.firstMonth, Math.min(this.props.firstMonth + this.props.numMonths - 1, nearestMonth));\r\n            if(nearestMonth != this.props.rangeStart) this.props.onRangeChange(nearestMonth, this.props.rangeSize);\r\n        }\r\n        return false;\r\n    },\r\n    onMouseLeave: function(e) {\r\n        this.setState({\r\n            dragging: false\r\n        });\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\n\r\nmodule.exports = React.createClass({displayName: 'ToggleChooser',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable,\r\n        items: React.PropTypes.arrayOf(React.PropTypes.renderable),\r\n        selectedItem: React.PropTypes.renderable,\r\n        onItemSelect: React.PropTypes.func\r\n    },\r\n\r\n    getDefaultProps: function() {\r\n        return {\r\n            items: []\r\n        };\r\n    },\r\n\r\n    render: function() {\r\n        var that = this;\r\n        var itemStyle = {\r\n            width: (100 / this.props.items.length) + '%'\r\n        };\r\n        var listItems = this.props.items.map(function(item) {\r\n            /*jshint ignore:start */\r\n            if(item === that.props.selectedItem) {\r\n                return React.DOM.li({className: \"togglechooser-item-selected\", key: item, style: itemStyle}, item);\r\n            } else {\r\n                return React.DOM.li({className: \"togglechooser-item\", key: item, style: itemStyle, onClick: that.selectItem.bind(that, item)}, item);\r\n            }\r\n            /*jshint ignore:end */\r\n        });\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: this.props.id}, \r\n                React.DOM.p({className: \"section-title\"}, this.props.title), \r\n                React.DOM.ul({className: \"togglechooser-list\"}, listItems)\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    selectItem: function(item) {\r\n        this.props.onItemSelect(item);\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\nvar SuperAgent = window.superagent;\r\n\r\nmodule.exports = {\r\n    getOverviewData: function(horizon, period, successCb, failureCb) {\r\n        SuperAgent.get('overview?horizon=' + horizon + '&period=' + period).end(function(err, resp) {\r\n            if(err) failureCb(err);\r\n            else if(resp.error) failureCb(resp.error);\r\n            else successCb(resp.body);\r\n        });\r\n    },\r\n    getDetailData: function(horizon, period, state, successCb, failureCb) {\r\n        SuperAgent.get('detail?horizon=' + horizon + '&period=' + period + '&state=' + state).end(function(err, resp) {\r\n            if(err) failureCb(err);\r\n            else if(resp.error) failureCb(resp.error);\r\n            else successCb(resp.body);\r\n        });\r\n    }\r\n};\r\n",
    "\"use strict\";\nfunction Emitter(debugPrefix) {\r\n    this.callbacks = [];\r\n    this.debugPrefix = debugPrefix;\r\n}\r\nEmitter.prototype.register = function(callback) {\r\n    this.callbacks.push(callback);\r\n    if(this.debugPrefix) console.log(this.debugPrefix + ': added callback ' + callback);\r\n};\r\nEmitter.prototype.unregister = function(callback) {\r\n    var idx = this.callbacks.indexOf(callback);\r\n    if(idx >= 0) {\r\n        this.callbacks.splice(idx, 1);\r\n        if(this.debugPrefix) console.log(this.debugPrefix + ': removed callback ' + callback);\r\n    } else {\r\n        if(this.debugPrefix) console.log(this.debugPrefix + ': did not find callback ' + callback);\r\n    }\r\n};\r\nEmitter.prototype.emit = function() {\r\n    if(this.debugPrefix) console.log(this.debugPrefix + ': emit to ' + this.callbacks.length + ' callbacks');\r\n    this.callbacks.forEach(function(cb) { cb(); });\r\n};\r\n\r\nmodule.exports = Emitter;",
    "\"use strict\";\nmodule.exports = {\r\n    addCommas: function(value) {\r\n        var x = value + \"\";\r\n        var rgx = /(\\d+)(\\d{3})/;\r\n        while(rgx.test(x)) {\r\n            x = x.replace(rgx, \"$1\" + \",\" + \"$2\");\r\n        }\r\n        return x;\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('./emitter');\r\n\r\nvar emitter = new Emitter();\r\n\r\nvar addHashListener = function() {\r\n    window.addEventListener(\"hashchange\", handleHashChange, false);\r\n};\r\n\r\nvar removeHashListener = function() {\r\n    window.removeEventListener(\"hashchange\", handleHashChange);\r\n};\r\n\r\nvar handleHashChange = function() {\r\n    if(document.activeElement !== document.body) {\r\n        // clear the focus on hash change\r\n        if(document.activeElement) document.activeElement.blur();\r\n    }\r\n    emitter.emit();\r\n};\r\n\r\nmodule.exports = {\r\n    start: function() {\r\n        addHashListener();\r\n    },\r\n    stop: function() {\r\n        removeHashListener();\r\n    },\r\n    onChange: function(callback) {\r\n        emitter.register(callback);\r\n    },\r\n    offChange: function(callback) {\r\n        emitter.unregister(callback);\r\n    },\r\n    setRoute: function(route) {\r\n        removeHashListener();\r\n        window.location.hash = route;\r\n        setTimeout(function() { addHashListener(); }, 1);\r\n    },\r\n    getRoute: function() {\r\n        return window.location.hash;\r\n    }\r\n};",
    "\"use strict\";\nmodule.exports = {\r\n    debounce: function(func, wait, immediate) {\r\n        var timeout, args, context, timestamp, result;\r\n        return function() {\r\n            context = this;\r\n            args = arguments;\r\n            timestamp = new Date();\r\n            var later = function() {\r\n                var last = (new Date()) - timestamp;\r\n                if (last < wait) {\r\n                    timeout = setTimeout(later, wait - last);\r\n                } else {\r\n                    timeout = null;\r\n                    if (!immediate) result = func.apply(context, args);\r\n                }\r\n            };\r\n            var callNow = immediate && !timeout;\r\n            if (!timeout) {\r\n                timeout = setTimeout(later, wait);\r\n            }\r\n            if (callNow) result = func.apply(context, args);\r\n            return result;\r\n        };\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar coverage = null;\r\n\r\nmodule.exports = {\r\n    onChange: function(callback) {\r\n        emitter.register(callback);\r\n    },\r\n    offChange: function(callback) {\r\n        emitter.unregister(callback);\r\n    },\r\n    getCoverage: function() {\r\n        return coverage;\r\n    },\r\n    setCoverage: function(value) {\r\n        coverage = value;\r\n        emitter.emit();\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar rangeStart = -1;\r\nvar rangeSize = 1;\r\n\r\nmodule.exports = {\r\n    onChange: function(callback) {\r\n        emitter.register(callback);\r\n    },\r\n    offChange: function(callback) {\r\n        emitter.unregister(callback);\r\n    },\r\n    getRangeStart: function() {\r\n        return rangeStart;\r\n    },\r\n    getRangeSize: function() {\r\n        return rangeSize;\r\n    },\r\n    setRange: function(startValue, sizeValue) {\r\n        rangeStart = startValue;\r\n        rangeSize = sizeValue;\r\n        emitter.emit();\r\n    },\r\n    setRangeStart: function(value) {\r\n        rangeStart = value;\r\n        emitter.emit();\r\n    },\r\n    setRangeSize: function(value) {\r\n        rangeSize = value;\r\n        emitter.emit();\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar data = null;\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  hasData: function() {\r\n    return data !== null;\r\n  },\r\n  getData: function() {\r\n    return data;\r\n  },\r\n  setData: function(value) {\r\n    data = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar forecast = 'Off';\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  getForecast: function() {\r\n    return forecast;\r\n  },\r\n  setForecast: function(value) {\r\n    forecast = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar horizon = null;\r\n\r\nmodule.exports = {\r\n    onChange: function(callback) {\r\n        emitter.register(callback);\r\n    },\r\n    offChange: function(callback) {\r\n        emitter.unregister(callback);\r\n    },\r\n    getHorizon: function() {\r\n        return horizon;\r\n    },\r\n    setHorizon: function(value) {\r\n        horizon = value;\r\n        emitter.emit();\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar metric = null;\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  getMetric: function() {\r\n    return metric;\r\n  },\r\n  setMetric: function(value) {\r\n    metric = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar odata = null;\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  hasData: function() {\r\n    return odata !== null;\r\n  },\r\n  getData: function() {\r\n    return odata;\r\n  },\r\n  setData: function(value) {\r\n    odata = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar period = null;\r\n\r\nmodule.exports = {\r\n    onChange: function(callback) {\r\n        emitter.register(callback);\r\n    },\r\n    offChange: function(callback) {\r\n        emitter.unregister(callback);\r\n    },\r\n    getPeriod: function() {\r\n        return period;\r\n    },\r\n    setPeriod: function(value) {\r\n        period = value;\r\n        emitter.emit();\r\n    }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar showSelectedChart = 'Off';\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  getShowSelectedChart: function() {\r\n    return showSelectedChart;\r\n  },\r\n  setShowSelectedChart: function(value) {\r\n    showSelectedChart = value;\r\n    emitter.emit();\r\n  }\r\n};",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar state = null;\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  isStateSelected: function() {\r\n    return state !== null;\r\n  },\r\n  getState: function() {\r\n    return state;\r\n  },\r\n  setState: function(value) {\r\n    state = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar stateView = 'Charts';\r\n\r\nmodule.exports = {\r\n  ViewState: Object.freeze({\r\n    CHARTS: 'Charts',\r\n    TABLE: 'Table'\r\n  }),\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  getStateView: function() {\r\n    return stateView;\r\n  },\r\n  setStateView: function(value) {\r\n    stateView = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\nmodule.exports = {\r\n    'AL': 'Alabama',\r\n    'AK': 'Alaska',\r\n    'AZ': 'Arizona',\r\n    'AR': 'Arkansas',\r\n    'CA': 'California',\r\n    'CO': 'Colorado',\r\n    'CT': 'Connecticut',\r\n    'DE': 'Delaware',\r\n    'DC': 'District of Columbia',\r\n    'FL': 'Florida',\r\n    'GA': 'Georgia',\r\n    'HI': 'Hawaii',\r\n    'ID': 'Idaho',\r\n    'IL': 'Illinois',\r\n    'IN': 'Indiana',\r\n    'IA': 'Iowa',\r\n    'KS': 'Kansas',\r\n    'KY': 'Kentucky',\r\n    'LA': 'Louisiana',\r\n    'ME': 'Maine',\r\n    'MD': 'Maryland',\r\n    'MA': 'Massachusetts',\r\n    'MI': 'Michigan',\r\n    'MN': 'Minnesota',\r\n    'MS': 'Mississippi',\r\n    'MO': 'Missouri',\r\n    'MT': 'Montana',\r\n    'NE': 'Nebraska',\r\n    'NV': 'Nevada',\r\n    'NH': 'New Hampshire',\r\n    'NJ': 'New Jersey',\r\n    'NM': 'New Mexico',\r\n    'NY': 'New York',\r\n    'NC': 'North Carolina',\r\n    'ND': 'North Dakota',\r\n    'OH': 'Ohio',\r\n    'OK': 'Oklahoma',\r\n    'OR': 'Oregon',\r\n    'PA': 'Pennsylvania',\r\n    'RI': 'Rhode Island',\r\n    'SC': 'South Carolina',\r\n    'SD': 'South Dakota',\r\n    'TN': 'Tennessee',\r\n    'TX': 'Texas',\r\n    'UT': 'Utah',\r\n    'VT': 'Vermont',\r\n    'VA': 'Virginia',\r\n    'WA': 'Washington',\r\n    'WV': 'West Virginia',\r\n    'WI': 'Wisconsin',\r\n    'WY': 'Wyoming',\r\n    'ALABAMA': 'Alabama',\r\n    'ALASKA': 'Alaska',\r\n    'ARIZONA': 'Arizona',\r\n    'ARKANSAS': 'Arkansas',\r\n    'CALIFORNIA': 'California',\r\n    'COLORADO': 'Colorado',\r\n    'CONNECTICUT': 'Connecticut',\r\n    'DELAWARE': 'Delaware',\r\n    'DIST OF COL': 'District of Columbia',\r\n    'FLORIDA': 'Florida',\r\n    'GEORGIA': 'Georgia',\r\n    'HAWAII': 'Hawaii',\r\n    'IDAHO': 'Idaho',\r\n    'ILLINOIS': 'Illinois',\r\n    'INDIANA': 'Indiana',\r\n    'IOWA': 'Iowa',\r\n    'KANSAS': 'Kansas',\r\n    'KENTUCKY': 'Kentucky',\r\n    'LOUISIANA': 'Louisiana',\r\n    'MAINE': 'Maine',\r\n    'MARYLAND': 'Maryland',\r\n    'MASSACHUSETTS': 'Massachusetts',\r\n    'MICHIGAN': 'Michigan',\r\n    'MINNESOTA': 'Minnesota',\r\n    'MISSISSIPPI': 'Mississippi',\r\n    'MISSOURI': 'Missouri',\r\n    'MONTANA': 'Montana',\r\n    'NEBRASKA': 'Nebraska',\r\n    'NEVADA': 'Nevada',\r\n    'NEW HAMPSHIRE': 'New Hampshire',\r\n    'NEW JERSEY': 'New Jersey',\r\n    'NEW MEXICO': 'New Mexico',\r\n    'NEW YORK': 'New York',\r\n    'NORTH CAROLINA': 'North Carolina',\r\n    'NORTH DAKOTA': 'North Dakota',\r\n    'OHIO': 'Ohio',\r\n    'OKLAHOMA': 'Oklahoma',\r\n    'OREGON': 'Oregon',\r\n    'PENNSYLVANIA': 'Pennsylvania',\r\n    'RHODE ISLAND': 'Rhode Island',\r\n    'SOUTH CAROLINA': 'South Carolina',\r\n    'SOUTH DAKOTA': 'South Dakota',\r\n    'TENNESSEE': 'Tennessee',\r\n    'TEXAS': 'Texas',\r\n    'UTAH': 'Utah',\r\n    'VERMONT': 'Vermont',\r\n    'VIRGINIA': 'Virginia',\r\n    'WASHINGTON': 'Washington',\r\n    'WEST VIRGINIA': 'West Virginia',\r\n    'WISCONSIN': 'Wisconsin',\r\n    'WYOMING': 'Wyoming'\r\n};",
    "\"use strict\";\nvar Emitter = require('../core/emitter');\r\n\r\nvar emitter = new Emitter();\r\nvar err = null;\r\n\r\nmodule.exports = {\r\n  onChange: function(callback) {\r\n      emitter.register(callback);\r\n  },\r\n  offChange: function(callback) {\r\n      emitter.unregister(callback);\r\n  },\r\n  getError: function() {\r\n    return err;\r\n  },\r\n  setError: function(value) {\r\n    err = value;\r\n    emitter.emit();\r\n  }\r\n};\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar DetailDataMdl = require('../model/detailDataMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\nvar TrendChart = require('./trendChart');\r\n\r\nmodule.exports = React.createClass({displayName: 'ChartsArea',\r\n    propTypes: {\r\n        coverage: React.PropTypes.string\r\n    },\r\n\r\n    render: function() {\r\n        if(this.state.detailData === null) return null;\r\n        var stateData = this.state.detailData;\r\n        var charts = [];\r\n        for(var metricName in stateData.metrics) {\r\n            var startDate = (stateData.startYear - 1970) * 12 + stateData.startMonth;\r\n            //if (PeriodMdl.getPeriod() == 'R12') startDate += 11;\r\n            /*jshint ignore:start */\r\n            charts.push(TrendChart({id: 'tchart-' + charts.length, key: metricName + this.props.coverage, \r\n                title: metricName, startDate: startDate, data: stateData.metrics[metricName][this.props.coverage]}));\r\n            /*jshint ignore:end */\r\n        }\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: \"detail-charts\"}, charts)\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            metrics: OverviewDataMdl.getData() ? OverviewDataMdl.getData().metricsNames : [],\r\n            detailData: DetailDataMdl.getData()\r\n        };\r\n    },\r\n    componentDidMount: function() {\r\n        OverviewDataMdl.onChange(this.onDataChange);\r\n        DetailDataMdl.onChange(this.onDtlDataChange);\r\n    },\r\n    componentWillUnmount: function() {\r\n        OverviewDataMdl.offChange(this.onDataChange);\r\n        DetailDataMdl.offChange(this.onDtlDataChange);\r\n    },\r\n    onDtlDataChange: function() {\r\n        this.setState({\r\n            detailData: DetailDataMdl.getData()\r\n        });\r\n    },\r\n    onDataChange: function() {\r\n        var data = OverviewDataMdl.getData();\r\n        this.setState({\r\n            metrics: data.metricsNames\r\n        });\r\n    }\r\n});\r\n",
    "\"use strict\";\nmodule.exports = {\r\n    scale: d3.scale.linear()\r\n        .domain([-2, -1, -0.99, 0.99, 1, 2])\r\n        .range(['#8ea8be', '#d8e1e8', '#ffffff', '#ffffff', '#ffeebd', '#ffdc73'])\r\n        .clamp(true)\r\n};\r\n\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar AppHeader = require('../component/appHeader');\r\nvar TimeSlider = require('../component/timeSlider');\r\nvar ListChooser = require('../component/listChooser');\r\nvar ToggleChooser = require('../component/toggleChooser');\r\nvar DropdownChooser = require('../component/dropdownChooser');\r\nvar Legend = require('../component/legend');\r\nvar ChartsArea = require('./chartsArea');\r\nvar TableArea = require('./tableArea');\r\nvar StateMdl = require('../model/stateMdl');\r\nvar StateViewMdl = require('../model/stateViewMdl');\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\nvar ForecastMdl = require('../model/forecastMdl');\r\nvar ShowSelectedChartMdl = require('../model/showSelectedChartMdl');\r\nvar DataColors = require('./dataColors');\r\nvar States = require('../model/states');\r\nvar SelectStateAction = require('../action/selectStateAction');\r\n\r\nmodule.exports = React.createClass({displayName: 'OverviewPg',\r\n\r\n    render: function() {\r\n        var showForecast = ForecastMdl.getForecast()=='On' && HorizonMdl.getHorizon()==1;\r\n        console.log(showForecast);\r\n        var chartCats = (showForecast) ? this.chartCatsForecast : this.chartCats;\r\n        \r\n        var horizonToNewTrendsDetectedLabel = {\r\n            '1': 'Short-term trends (1 month)',\r\n            '6': 'Medium-term trends (6 months)',\r\n            '12': 'Long-term trends (1 year)'\r\n        };\r\n        \r\n        var newTrendsDetectedLabel = '';\r\n        var newTrendsDetectedLabels = [];\r\n        if (this.state.selectedHorizon) {\r\n            newTrendsDetectedLabel = horizonToNewTrendsDetectedLabel[this.state.selectedHorizon];\r\n            newTrendsDetectedLabels = Object.keys(horizonToNewTrendsDetectedLabel)\r\n                                            .map(function(key){return horizonToNewTrendsDetectedLabel[key]});\r\n        }\r\n        \r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div(null, \r\n                AppHeader({title: \"Claims Early Notification Tool\"}), \r\n                React.DOM.div({id: \"dtl-content\"}, \r\n                    React.DOM.p({id: \"dtl-title\", className: \"page-title\"}, \r\n                        React.DOM.a({href: \"#\", id: \"dtl-back\", className: \"fa fa-chevron-left\", onClick: this.navBack}), \r\n                        States[this.state.selectedState], \" Details\"\n                    ), \r\n                    React.DOM.div({id: \"dtl-main-area\"}, \r\n                         (this.state.selectedStateView === StateViewMdl.ViewState.CHARTS) ? ChartsArea({coverage: this.state.selectedCvg}) : TableArea({coverage: this.state.selectedCvg})\r\n                    ), \r\n                    React.DOM.div({id: \"dtl-filter-area\"}, \r\n                        ToggleChooser({id: \"dtl-view-toggle\", title: \"View\", items: [ 'Charts', 'Table'], selectedItem: this.state.selectedStateView, onItemSelect: this.onStateViewSelect}), \r\n                         DropdownChooser({id: \"dtl-horizon-filter\", title: \"New Trends Detected\", items: newTrendsDetectedLabels, selectedItem: newTrendsDetectedLabel, onItemSelect: this.onHorizonSelect}), \r\n                         (this.state.selectedHorizon == 1) ? ToggleChooser({id: \"dtl-forecast-filter\", title: \"Forecast\", items: ['On', 'Off'], selectedItem: this.state.selectedForecast, onItemSelect: this.onForecastSelect}) : React.DOM.span(null), \r\n                        ToggleChooser({id: \"dtl-period-filter\", title: \"Rolling 12 or Monthly\", items: this.state.periods, selectedItem: this.state.selectedPeriod, onItemSelect: this.onPeriodSelect}), \r\n                        ListChooser({id: \"dtl-cvg-filter\", title: \"Coverage / Segment\", items: this.state.cvgs, selectedItem: this.state.selectedCvg, onItemSelect: this.onCvgSelect}), \r\n                         (this.state.selectedStateView === StateViewMdl.ViewState.CHARTS) ? Legend({categories: chartCats}) : Legend({categories: this.tableCats})\r\n                    )\r\n                )\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n    getInitialState: function() {\r\n        return {\r\n            cvgs: OverviewDataMdl.getData() ? OverviewDataMdl.getData().coverages : [],\r\n            selectedCvg: CoverageMdl.getCoverage(),\r\n            selectedState: StateMdl.getState(),\r\n            selectedStateView: StateViewMdl.getStateView(),\r\n            horizons: OverviewDataMdl.getData() ? OverviewDataMdl.getData().horizons : [],\r\n            selectedHorizon: HorizonMdl.getHorizon(),\r\n            periods: OverviewDataMdl.getData() ? OverviewDataMdl.getData().periods : [],\r\n            selectedPeriod: PeriodMdl.getPeriod(),\r\n            selectedForecast: ForecastMdl.getForecast()\r\n        };\r\n    },\r\n    componentWillMount: function() {\r\n        this.chartCats = [];\r\n        this.chartCats.push({\r\n            name: 'Actual Values',\r\n            color: '#444444',\r\n            borderColor: '#000000'\r\n        });\r\n        this.chartCats.push({\r\n            name: 'Expected Range',\r\n            color: 'rgba(168,255,155,0.5)',\r\n            borderColor: 'rgba(168,255,155,1)'\r\n        });\r\n        \r\n        this.chartCatsForecast = [];\r\n        this.chartCatsForecast.push({\r\n            name: 'Actual Values',\r\n            color: '#444444',\r\n            borderColor: '#000000'\r\n        });\r\n        this.chartCatsForecast.push({\r\n            name: 'Expected Range',\r\n            color: 'rgba(168,255,155,0.5)',\r\n            borderColor: 'rgba(168,255,155,1)'\r\n        });\r\n        this.chartCatsForecast.push({\r\n            name: 'Forecasted Range',\r\n            color: 'rgba(211,211,211,0.5)',\r\n            border: 'rgba(211,211,211,1)' \r\n        });\r\n\r\n        this.tableCats = [];\r\n        this.tableCats.push({\r\n            name: 'High Values',\r\n            color: DataColors.scale(1.5),\r\n            borderColor: DataColors.scale(2)\r\n        });\r\n        this.tableCats.push({\r\n            name: 'Expected Values',\r\n            color: '#ffffff',\r\n            borderColor: '#999999'\r\n        });\r\n        this.tableCats.push({\r\n            name: 'Low Values',\r\n            color: DataColors.scale(-1.5),\r\n            borderColor: DataColors.scale(-2)\r\n        });\r\n    },\r\n    componentDidMount: function() {\r\n        this.originalCvg = this.state.selectedCvg;\r\n        StateMdl.onChange(this.onSelectedStateChange);\r\n        StateViewMdl.onChange(this.onStateViewChange);\r\n        CoverageMdl.onChange(this.onCvgChange);\r\n        OverviewDataMdl.onChange(this.onDataChange);\r\n        HorizonMdl.onChange(this.onHorizonChange);\r\n        PeriodMdl.onChange(this.onPeriodChange);\r\n        ForecastMdl.onChange(this.onForecastChange);\r\n    },\r\n    componentWillUnmount: function() {\r\n        StateMdl.offChange(this.onSelectedStateChange);\r\n        StateViewMdl.offChange(this.onStateViewChange);\r\n        CoverageMdl.offChange(this.onCvgChange);\r\n        OverviewDataMdl.offChange(this.onDataChange);\r\n        HorizonMdl.offChange(this.onHorizonChange);\r\n        PeriodMdl.offChange(this.onPeriodChange);\r\n        ForecastMdl.offChange(this.onForecastChange);\r\n    },\r\n    onSelectedStateChange: function() {\r\n        this.setState({\r\n            selectedState: StateMdl.getState()\r\n        });\r\n    },\r\n    onStateViewChange: function() {\r\n        this.setState({\r\n            selectedStateView: StateViewMdl.getStateView()\r\n        });\r\n    },\r\n    onDataChange: function() {\r\n        var data = OverviewDataMdl.getData();\r\n        this.setState({\r\n            cvgs: data.coverages,\r\n            horizons: data.horizons,\r\n            periods: data.periods\r\n        });\r\n    },\r\n    onCvgChange: function() {\r\n        this.setState({\r\n            selectedCvg: CoverageMdl.getCoverage()\r\n        });\r\n    },\r\n    onHorizonChange: function() {\r\n        this.setState({\r\n            selectedHorizon: HorizonMdl.getHorizon()\r\n        });\r\n    },\r\n    onPeriodChange: function() {\r\n        this.setState({\r\n            selectedPeriod: PeriodMdl.getPeriod()\r\n        });\r\n    },\r\n    onForecastChange: function() {\r\n        this.setState({\r\n            selectedForecast: ForecastMdl.getForecast()\r\n        });\r\n    },\r\n    onCvgSelect: function(cvg) {\r\n        ShowSelectedChartMdl.setShowSelectedChart('Off');\r\n        CoverageMdl.setCoverage(cvg);\r\n    },\r\n    onStateViewSelect: function(view) {\r\n        StateViewMdl.setStateView(view);\r\n    },\r\n    onHorizonSelect: function(newTrendsDetectedLabel) {\r\n        ShowSelectedChartMdl.setShowSelectedChart('Off');\r\n        var horizon = 1;\r\n        if (newTrendsDetectedLabel == 'Short-term trends (1 month)') horizon = 1;\r\n        if (newTrendsDetectedLabel == 'Medium-term trends (6 months)') horizon = 6;\r\n        if (newTrendsDetectedLabel == 'Long-term trends (1 year)') horizon = 12;\r\n        HorizonMdl.setHorizon(horizon);\r\n        var selectedState = StateMdl.getState();\r\n        var period = PeriodMdl.getPeriod();\r\n        SelectStateAction.exec(horizon, period, selectedState);\r\n        return false;\r\n    },\r\n    onPeriodSelect: function(period) {\r\n        ShowSelectedChartMdl.setShowSelectedChart('Off');\r\n        PeriodMdl.setPeriod(period);\r\n        var selectedState = StateMdl.getState();\r\n        var horizon = HorizonMdl.getHorizon();\r\n        SelectStateAction.exec(horizon, period, selectedState);\r\n        return false;\r\n    },\r\n    onForecastSelect: function(forecast) {\r\n        ForecastMdl.setForecast(forecast);\r\n    },\r\n    navBack: function(el) {\r\n        if(this.originalCvg) CoverageMdl.setCoverage(this.originalCvg);\r\n        StateMdl.setState(null);\r\n        return false;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar InitDataAction = require('../action/initDataAction');\r\nvar SelectStateAction = require('../action/selectStateAction');\r\nvar AppHeader = require('../component/appHeader');\r\nvar TimeSlider = require('../component/timeSlider');\r\nvar DropdownChooser = require('../component/dropdownChooser');\r\nvar ListChooser = require('../component/listChooser');\r\nvar ToggleChooser = require('../component/toggleChooser');\r\nvar Legend = require('../component/legend');\r\nvar UsMap = require('./usMap');\r\nvar DataColors = require('./dataColors');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\nvar ShowSelectedChartMdl = require('../model/showSelectedChartMdl');\r\n\r\nmodule.exports = React.createClass({displayName: 'OverviewPg',\r\n\r\n    render: function() {    \r\n        var legendCats = [];\r\n        legendCats.push({\r\n            name: 'Above range',\r\n            color: DataColors.scale(2),\r\n            borderColor: d3.rgb(DataColors.scale(2)).darker().toString()\r\n        });\r\n        legendCats.push({\r\n            name: '',\r\n            color: DataColors.scale(1),\r\n            borderColor: d3.rgb(DataColors.scale(1)).darker().toString()\r\n        });\r\n        legendCats.push({\r\n            name: 'Within range',\r\n            color: '#ffffff',\r\n            borderColor: '#999999'\r\n        });\r\n        legendCats.push({\r\n            name: ' ',\r\n            color: DataColors.scale(-1),\r\n            borderColor: d3.rgb(DataColors.scale(-1)).darker().toString()\r\n        });\r\n        legendCats.push({\r\n            name: 'Below range',\r\n            color: DataColors.scale(-2),\r\n            borderColor: d3.rgb(DataColors.scale(-2)).darker().toString()\r\n        });\r\n               \r\n        var horizonToNewTrendsDetectedLabel = {\r\n            '1': 'Short-term trends (1 month)',\r\n            '6': 'Medium-term trends (6 months)',\r\n            '12': 'Long-term trends (1 year)'\r\n        };\r\n        \r\n        var newTrendsDetectedLabel = '';\r\n        var newTrendsDetectedLabels = [];\r\n        if (this.state.selectedHorizon) {\r\n            newTrendsDetectedLabel = horizonToNewTrendsDetectedLabel[this.state.selectedHorizon];\r\n            newTrendsDetectedLabels = Object.keys(horizonToNewTrendsDetectedLabel)\r\n                                            .map(function(key){return horizonToNewTrendsDetectedLabel[key]});\r\n        }\r\n            \r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div(null, \r\n                AppHeader({title: \"Claims Early Notification Tool\"}), \r\n                React.DOM.div({id: \"oview-content\"}, \r\n                    React.DOM.p({id: \"oview-title\", className: \"page-title\"}, \"Explore\"), \r\n                    React.DOM.div({id: \"oview-map-area\"}, \r\n                        TimeSlider({id: \"oview-time-filter\", numMonths: this.state.numMonths, firstMonth: this.state.firstMonth, rangeStart: this.state.rangeStart, rangeSize: this.state.rangeSize, onRangeChange: this.onRangeChange}), \r\n                        UsMap(null), \r\n                        React.DOM.p({id: \"oview-map-note\", className: \"note-txt\"}, \"Click any state for detailed charts\")\r\n                    ), \r\n                    React.DOM.div({id: \"oview-filter-area\"}, \r\n                        DropdownChooser({id: \"oview-horizon-filter\", title: \"New Trends Detected\", items: newTrendsDetectedLabels, selectedItem: newTrendsDetectedLabel, onItemSelect: this.onHorizonSelect}), \r\n                        ToggleChooser({id: \"oview-period-filter\", title: \"Rolling 12 or Monthly\", items: this.state.periods, selectedItem: this.state.selectedPeriod, onItemSelect: this.onPeriodSelect}), \r\n                        ListChooser({id: \"oview-cvg-filter\", title: \"Coverage / Segment\", items: this.state.cvgs, selectedItem: this.state.selectedCvg, onItemSelect: this.onCvgSelect}), \r\n                        ListChooser({id: \"oview-metrics-filter\", title: \"Metrics\", items: this.state.metrics, selectedItem: this.state.selectedMetric, onItemSelect: this.onMetricSelect}), \r\n                        Legend({categories: legendCats, hasMargins: false})\r\n                    ), \r\n                    React.DOM.p({id: \"oview-title-2\", className: \"page-title\"}, \"Highlights\"), \r\n                    React.DOM.p({id: \"oview-title-smaller\", className: \"page-title-smaller\"}, \"Injury\"), \r\n                    React.DOM.div({id: \"oview-table-col1\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top above range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('Injury', 'top'))\r\n                        )\r\n                    ), \r\n                    React.DOM.div({id: \"oview-table-col2\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top below range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('Injury', 'bottom'))\r\n                        )\r\n                    ), \r\n                    React.DOM.p({id: \"oview-title-smaller\", className: \"page-title-smaller\"}, \"PIP/MPC\"), \r\n                    React.DOM.div({id: \"oview-table-col1\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top above range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('PIP/MPC', 'top'))\r\n                        )\r\n                    ), \r\n                    React.DOM.div({id: \"oview-table-col2\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top below range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('PIP/MPC', 'bottom'))\r\n                        )\r\n                    ), \r\n                    React.DOM.p({id: \"oview-title-smaller\", className: \"page-title-smaller\"}, \"Property\"), \r\n                    React.DOM.div({id: \"oview-table-col1\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top above range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('Property', 'top'))\r\n                        )\r\n                    ), \r\n                    React.DOM.div({id: \"oview-table-col2\"}, \r\n                        React.DOM.p({id: \"oview-section-title\", className: \"section-title\"}, \"Top below range\"), \r\n                        React.DOM.table({id: \"oview-table\"}, \r\n                            React.DOM.tbody(null, this.getTableRows('Property', 'bottom'))\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            metrics: OverviewDataMdl.getData() ? OverviewDataMdl.getData().metricsNames : [],\r\n            selectedMetric: MetricMdl.getMetric(),\r\n            cvgs: OverviewDataMdl.getData() ? OverviewDataMdl.getData().coverages : [],\r\n            selectedCvg: CoverageMdl.getCoverage(),\r\n            numMonths: OverviewDataMdl.getData() ? OverviewDataMdl.getData().numMonths : -1,\r\n            firstMonth: OverviewDataMdl.getData() ? OverviewDataMdl.getData().startDate : -1,\r\n            rangeStart: DateRangeMdl.getRangeStart(),\r\n            rangeSize: DateRangeMdl.getRangeSize(),\r\n            table: OverviewDataMdl.getData() ? OverviewDataMdl.getData().table : [],\r\n            horizons: OverviewDataMdl.getData() ? OverviewDataMdl.getData().horizons : [],\r\n            selectedHorizon: HorizonMdl.getHorizon(),\r\n            periods: OverviewDataMdl.getData() ? OverviewDataMdl.getData().periods : [],\r\n            selectedPeriod: PeriodMdl.getPeriod()\r\n        };\r\n    },\r\n\r\n    componentDidMount: function() {\r\n        MetricMdl.onChange(this.onMetricChange);\r\n        CoverageMdl.onChange(this.onCvgChange);\r\n        OverviewDataMdl.onChange(this.onDataChange);\r\n        DateRangeMdl.onChange(this.onDateChange);\r\n        HorizonMdl.onChange(this.onHorizonChange);\r\n        PeriodMdl.onChange(this.onPeriodChange);\r\n    },\r\n    componentWillUnmount: function() {\r\n        MetricMdl.offChange(this.onMetricChange);\r\n        CoverageMdl.offChange(this.onCvgChange);\r\n        OverviewDataMdl.offChange(this.onDataChange);\r\n        DateRangeMdl.offChange(this.onDateChange);\r\n        HorizonMdl.offChange(this.onHorizonChange);\r\n        PeriodMdl.offChange(this.onPeriodChange);\r\n    },\r\n\r\n    onRangeChange: function(start, size) {\r\n        DateRangeMdl.setRange(start, size);\r\n    },\r\n\r\n    onMetricChange: function() {\r\n        this.setState({\r\n            selectedMetric: MetricMdl.getMetric()\r\n        });\r\n    },\r\n\r\n    onCvgChange: function() {\r\n        this.setState({\r\n            selectedCvg: CoverageMdl.getCoverage()\r\n        });\r\n    },\r\n                                    \r\n    onHorizonChange: function() {\r\n        this.setState({\r\n            selectedHorizon: HorizonMdl.getHorizon()\r\n        });\r\n    },\r\n                                    \r\n    onPeriodChange: function() {\r\n        this.setState({\r\n            selectedPeriod: PeriodMdl.getPeriod()\r\n        });\r\n    },\r\n\r\n    onDateChange: function() {\r\n        this.setState({\r\n            rangeStart: DateRangeMdl.getRangeStart(),\r\n            rangeSize: DateRangeMdl.getRangeSize()\r\n        });\r\n    },\r\n\r\n    onDataChange: function() {\r\n        var data = OverviewDataMdl.getData();\r\n        this.setState({\r\n            metrics: data.metricsNames,\r\n            cvgs: data.coverages,\r\n            numMonths: data.numMonths,\r\n            firstMonth: data.startDate,\r\n            table: data.table,\r\n            horizons: data.horizons,\r\n            periods: data.periods\r\n        });\r\n    },\r\n\r\n    onMetricSelect: function(metric) {\r\n        MetricMdl.setMetric(metric);\r\n    },\r\n\r\n    onCvgSelect: function(cvg) {\r\n        CoverageMdl.setCoverage(cvg);\r\n    },\r\n                                    \r\n    onHorizonSelect: function(newTrendsDetectedLabel) {\r\n        var horizon = 1;\r\n        if (newTrendsDetectedLabel == 'Short-term trends (1 month)') horizon = 1;\r\n        if (newTrendsDetectedLabel == 'Medium-term trends (6 months)') horizon = 6;\r\n        if (newTrendsDetectedLabel == 'Long-term trends (1 year)') horizon = 12;\r\n        HorizonMdl.setHorizon(horizon);\r\n        var period = PeriodMdl.getPeriod();\r\n        InitDataAction.exec(horizon, period);\r\n    },\r\n                                    \r\n    onPeriodSelect: function(period) {\r\n        PeriodMdl.setPeriod(period);\r\n        var horizon = HorizonMdl.getHorizon();\r\n        InitDataAction.exec(horizon, period);\r\n    },\r\n        \r\n    selectRow: function(rowData) {\r\n        var data = OverviewDataMdl.getData();\r\n        CoverageMdl.setCoverage(rowData.cvg);\r\n        MetricMdl.setMetric(rowData.metric);\r\n        DateRangeMdl.setRangeStart(data.startDate + data.numMonths - DateRangeMdl.getRangeSize());\r\n        ShowSelectedChartMdl.setShowSelectedChart('On');\r\n        var horizon = HorizonMdl.getHorizon();\r\n        var period = PeriodMdl.getPeriod();\r\n        SelectStateAction.exec(horizon, period, rowData.state);\r\n    },\r\n                                    \r\n    getTableRows: function(segment, topOrBottom) {\r\n        // Segment: 'Injury', 'PIP/MPC', or 'Property'\r\n        // topOrBottom: 'top' or 'bottom'\r\n\r\n        if (topOrBottom=='top') var backgroundColor = DataColors.scale(2);\r\n        if (topOrBottom=='bottom') var backgroundColor = DataColors.scale(-2);\r\n        \r\n        var colorStyle = {\r\n            backgroundColor: backgroundColor,\r\n            width: '12px'\r\n        };\r\n        \r\n        var cellPadding = {\r\n            padding: '0 4px'\r\n        };\r\n        \r\n        var stateStyle = {\r\n            padding: '0 4px',\r\n            textTransform: 'capitalize',\r\n        }; \r\n        \r\n        var tableData = [];\r\n        if (Object.keys(this.state.table).length > 0) {\r\n            tableData = this.state.table[segment][topOrBottom];\r\n            if (topOrBottom=='top') tableData = tableData.sort(function(a,b) { return parseFloat(b[3]) - parseFloat(a[3]) });\r\n            if (topOrBottom=='bottom') tableData = tableData.sort(function(a,b) { return parseFloat(a[3]) - parseFloat(b[3]) });\r\n        } \r\n            \r\n        var tableRows = [];\r\n        for (var i=0; i<tableData.length; i++) {\r\n             var rowData = {\r\n                metric: tableData[i][0],\r\n                cvg: tableData[i][1],\r\n                state: tableData[i][2],                    \r\n                score: tableData[i][3]\r\n            };           \r\n            \r\n            tableRows.push(\r\n                /*jshint ignore:start */\r\n                React.DOM.tr({onClick: this.selectRow.bind(this, rowData)}, \r\n                  React.DOM.td({style: colorStyle}, \" \"), \r\n                  React.DOM.td({style: stateStyle}, rowData.state.toLowerCase()), \r\n                  React.DOM.td({style: cellPadding}, rowData.cvg), \r\n                  React.DOM.td({style: cellPadding}, rowData.metric)\r\n                )\r\n\r\n                /*jshint ignore:end */\r\n            );\r\n        }\r\n                                    \r\n        return tableRows;\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar DetailDataMdl = require('../model/detailDataMdl');\r\nvar Formatting = require('../core/formatting');\r\nvar StateMdl = require('../model/stateMdl');\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\nvar ForecastMdl = require('../model/forecastMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar DataColors = require('./dataColors');\r\n\r\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\r\n\r\nvar isIE = (function() {\r\n    var ua = window.navigator.userAgent;\r\n    var old_ie = ua.indexOf('MSIE ');\r\n    var new_ie = ua.indexOf('Trident/');\r\n    return (old_ie > -1) || (new_ie > -1);\r\n})();\r\n\r\nmodule.exports = React.createClass({displayName: 'TableArea',\r\n    propTypes: {\r\n        coverage: React.PropTypes.string\r\n    },\r\n\r\n    // add State name, Coverage name\r\n    // add predicted values as well\r\n\r\n    render: function() {\r\n        var showForecast = ForecastMdl.getForecast()=='On' && HorizonMdl.getHorizon()==1;\r\n        \r\n        if(this.state.detailData === null) return null;\r\n        var stateData = this.state.detailData;\r\n        var firstMetric = (Object.keys(stateData.metrics))[0];\r\n        var firstCoverage = (Object.keys(stateData.metrics[firstMetric]))[0];\r\n        var numMonths = stateData.metrics[firstMetric][firstCoverage].predicted.length;\r\n\r\n        var csvData = 'State: ' + this.state.selectedState +\r\n            '\\nCoverage: ' + this.state.selectedCvg + '\\n\\n';\r\n\r\n        /*jshint ignore:start */\r\n        var headerEls = [];\r\n        headerEls.push(React.DOM.th(null, \"Month\"));\r\n        csvData += 'Month';\r\n        Object.keys(stateData.metrics).forEach(function(item, idx) {\r\n            headerEls.push(React.DOM.th(null, item));\r\n            csvData += ',' + item + ' (actual),' + item + ' (expected)';\r\n        });\r\n        csvData += '\\n';\r\n\r\n        var that = this;\r\n        var rows = [];\r\n            \r\n        var startMonth = stateData.startMonth;\r\n        var startYear = stateData.startYear;\r\n            \r\n        if (PeriodMdl.getPeriod() == 'R12') {\r\n            //startMonth += 11;\r\n            if (startMonth >= 12) {\r\n                startYear = startYear + 1;\r\n                startMonth = startMonth - 12;\r\n            }\r\n        }\r\n            \r\n        for(var moIdx = 0; moIdx < numMonths; moIdx++) {\r\n            var rowEls = [];\r\n            var monthName = months[(startMonth + moIdx) % 12];\r\n            var yearName = startYear + Math.floor((startMonth + moIdx) / 12);\r\n\r\n            if(moIdx === this.state.expandedRow) {\r\n                rowEls.push(React.DOM.td({className: \"dtl-table-datecol\"}, React.DOM.p(null, monthName + ' ' + yearName), React.DOM.p({className: \"dtl-table-expected\"}, \"Expected\")));\r\n            } else {\r\n                rowEls.push(React.DOM.td({className: \"dtl-table-datecol\"}, monthName + ' ' + yearName));\r\n            }\r\n            csvData += monthName + ' ' + yearName;\r\n            Object.keys(stateData.metrics).forEach(function(item, idx) {\r\n                var actual = stateData.metrics[item][that.props.coverage].actual[moIdx];\r\n                var predicted = stateData.metrics[item][that.props.coverage].predicted[moIdx];\r\n                var bkgdColor = DataColors.scale((actual - predicted) / stateData.metrics[item][that.props.coverage].stddev);\r\n                var cellstyle = {\r\n                    background: bkgdColor\r\n                };\r\n\r\n                if(moIdx === that.state.expandedRow) {\r\n                    rowEls.push(React.DOM.td(null, React.DOM.p({style: cellstyle}, Formatting.addCommas(actual)), React.DOM.p({className: \"dtl-table-expected\"}, Formatting.addCommas(predicted))));\r\n                } else {\r\n                    rowEls.push(React.DOM.td(null, React.DOM.p({style: cellstyle}, Formatting.addCommas(actual))));\r\n                }\r\n                csvData += ',' + actual + ',' + predicted;\r\n            });\r\n            csvData += '\\n';\r\n            if(moIdx === this.state.expandedRow) rows.push(React.DOM.tr({className: \"dtl-table-exprow\", onClick: this.selectRow.bind(this, moIdx)}, rowEls));\r\n            else if((startMonth + moIdx) % 12 === 0) rows.push(React.DOM.tr({className: \"dtl-table-yrrow\", onClick: this.selectRow.bind(this, moIdx)}, rowEls));\r\n            else rows.push(React.DOM.tr({onClick: this.selectRow.bind(this, moIdx)}, rowEls));\r\n        }\r\n        \r\n        if (showForecast) {\r\n            var rowsForecast = [];\r\n            \r\n            var numMonthsForecast = stateData.metrics[firstMetric][firstCoverage].forecast.values.length;\r\n            var startMonthForecast = (startMonth + numMonths) % 12;\r\n            var startYearForecast = startYear + Math.floor((startMonth + numMonths) / 12);\r\n            \r\n            for(var moIdx = 0; moIdx < numMonthsForecast; moIdx++) {\r\n                var rowEls = [];\r\n                var monthName = months[(startMonthForecast + moIdx) % 12];\r\n                var yearName = startYearForecast + Math.floor((startMonthForecast + moIdx) / 12);\r\n\r\n                rowEls.push(React.DOM.td({className: \"dtl-table-datecol\"}, monthName + ' ' + yearName));\r\n                csvData += monthName + ' ' + yearName;\r\n                Object.keys(stateData.metrics).forEach(function(item, idx) {\r\n                    var actual = '';\r\n                    var predicted = stateData.metrics[item][that.props.coverage].forecast.values[moIdx];\r\n                    var bkgdColor = DataColors.scale(0);\r\n                    var cellstyle = {\r\n                        background: bkgdColor\r\n                    };\r\n\r\n                    rowEls.push(React.DOM.td(null, React.DOM.p({style: cellstyle}, Formatting.addCommas(predicted))));\r\n                    csvData += ',' + actual + ',' + predicted;\r\n                });\r\n                csvData += '\\n';\r\n                if((startMonthForecast + moIdx) % 12 === 0) rowsForecast.push(React.DOM.tr({className: \"dtl-table-yrrow\"}, rowEls));\r\n                else rowsForecast.push(React.DOM.tr(null, rowEls));\r\n            }\r\n            \r\n        }\r\n        \r\n        /*jshint ignore:end */\r\n\r\n        var downloadLink = null;\r\n        if(!isIE) {\r\n            /*jshint ignore:start */\r\n            var dataHref = URL.createObjectURL(new Blob([csvData]));\r\n            downloadLink = React.DOM.a({href: dataHref, download: \"data.csv\", type: \"text/csv\", id: \"dtl-table-hdrlink\", className: \"primary-link\", onClick: this.downloadData}, \r\n                React.DOM.span({className: \"primary-link-icon fa fa-download\"}), \r\n                React.DOM.span({className: \"primary-link-txt\"}, \"Download Data\")\r\n            )\r\n            /*jshint ignore:end */\r\n        } else {\r\n            /*jshint ignore:start */\r\n            var dataHref = URL.createObjectURL(new Blob([]));\r\n            downloadLink = React.DOM.a({href: dataHref, type: \"text/csv\", id: \"dtl-table-hdrlink\", className: \"primary-link\", onClick: this.downloadForIE.bind(this,csvData)}, \r\n                React.DOM.span({className: \"primary-link-icon fa fa-download\"}), \r\n                React.DOM.span({className: \"primary-link-txt\"}, \"Download Data\")\r\n            )\r\n            /*jshint ignore:end */            \r\n        }\r\n\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div(null, \r\n                React.DOM.div({id: \"dtl-table-header\"}, \r\n                    React.DOM.p({id: \"dtl-table-title\", className: \"section-title\"}, \"Actual Values\"), \r\n                    React.DOM.p({className: \"note-txt\"}, \"Click any row to see expected values\"), \r\n                    downloadLink\r\n                ), \r\n                React.DOM.table({id: \"dtl-table\"}, \r\n                    React.DOM.thead(null, React.DOM.tr(null, headerEls)), \r\n                    React.DOM.tbody(null, rows)\r\n                ), \r\n            \r\n             showForecast ?\r\n            \r\n              React.DOM.span(null, \r\n                React.DOM.div({id: \"dtl-forecast-table-header\"}, \r\n                    React.DOM.p({id: \"dtl-table-title\", className: \"section-title\"}, \"Forecasted Values\"), \" \"\n                ), \r\n                React.DOM.table({id: \"dtl-table\"}, \r\n                    React.DOM.thead(null, React.DOM.tr(null, headerEls)), \r\n                    React.DOM.tbody(null, rowsForecast)\r\n                )\r\n              )\r\n\r\n                :\r\n\r\n              React.DOM.span(null)\r\n\r\n            \r\n            \r\n            )\r\n            \r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            metrics: OverviewDataMdl.getData() ? OverviewDataMdl.getData().metricsNames : [],\r\n            detailData: DetailDataMdl.getData(),\r\n            expandedRow: -1,\r\n            selectedCvg: CoverageMdl.getCoverage(),\r\n            selectedState: StateMdl.getState()\r\n        };\r\n    },\r\n    componentDidMount: function() {\r\n        OverviewDataMdl.onChange(this.onDataChange);\r\n        DetailDataMdl.onChange(this.onDtlDataChange);\r\n        StateMdl.onChange(this.onSelectedStateChange);\r\n        CoverageMdl.onChange(this.onCvgChange);\r\n    },\r\n    componentWillUnmount: function() {\r\n        OverviewDataMdl.offChange(this.onDataChange);\r\n        DetailDataMdl.offChange(this.onDtlDataChange);\r\n        StateMdl.offChange(this.onSelectedStateChange);\r\n        CoverageMdl.offChange(this.onCvgChange);\r\n    },\r\n    onDtlDataChange: function() {\r\n        this.setState({\r\n            detailData: DetailDataMdl.getData()\r\n        });\r\n    },\r\n    onSelectedStateChange: function() {\r\n        this.setState({\r\n            selectedState: StateMdl.getState()\r\n        });\r\n    },\r\n    onCvgChange: function() {\r\n        this.setState({\r\n            selectedCvg: CoverageMdl.getCoverage()\r\n        });\r\n    },\r\n    onDataChange: function() {\r\n        var data = OverviewDataMdl.getData();\r\n        this.setState({\r\n            metrics: data.metricsNames\r\n        });\r\n    },\r\n    selectRow: function(idx) {\r\n        var row = -1;\r\n        if(this.state.expandedRow !== idx) row = idx;\r\n        this.setState({\r\n            expandedRow: row\r\n        });\r\n    },\r\n    downloadForIE: function(csvData) {\r\n        var blobObject = new Blob([csvData]);\r\n        window.navigator.msSaveBlob(blobObject, 'data.csv'); \r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar ForecastMdl = require('../model/forecastMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar ShowSelectedChartMdl = require('../model/showSelectedChartMdl');\r\n\r\nvar stddevfactor = 1.96;\r\n\r\nmodule.exports = React.createClass({displayName: 'TrendChart',\r\n\r\n    propTypes: {\r\n        id: React.PropTypes.string,\r\n        title: React.PropTypes.renderable,\r\n        data: React.PropTypes.object,\r\n        startDate: React.PropTypes.number\r\n    },\r\n\r\n    drawChart: function(el, props) {\r\n        var showForecast = ForecastMdl.getForecast()=='On' && HorizonMdl.getHorizon()==1;\r\n        \r\n        if (showForecast) {\r\n            var length = props.data.actual.length + props.data.forecast.values.length;\r\n        } else {\r\n            var length = props.data.actual.length;\r\n        }\r\n           \r\n        d3.selectAll(el.childNodes).remove();\r\n        var margin = { top: 12, left: 40, bottom: 18, right: 12 };\r\n        var rect = el.getBoundingClientRect();\r\n        var w = rect.width - margin.left - margin.right;\r\n        var h = rect.height - margin.top - margin.bottom;\r\n        if(!props.data.actual) return; // TEMP while we have empty data sets\r\n        var xScale = d3.scale.linear()\r\n            .domain([0, length])\r\n            .range([0, w]);            \r\n        var yMax = d3.max([\r\n            d3.max(props.data.actual),\r\n            d3.max(props.data.predicted, function(item) { return item + props.data.stddev * stddevfactor;})\r\n        ]);\r\n        var yMin = d3.min([\r\n            0,\r\n            d3.min(props.data.actual),\r\n            d3.min(props.data.predicted, function(item) { return item - props.data.stddev * stddevfactor;})\r\n        ]);\r\n        \r\n        if (showForecast) {\r\n            for (var i = 0; i < props.data.forecast.values.length; i++) {\r\n                var y = props.data.forecast.values[i] + props.data.forecast.std[i] * stddevfactor;\r\n                if (y > yMax) yMax = y;\r\n                \r\n                var y = props.data.forecast.values[i] - props.data.forecast.std[i] * stddevfactor;\r\n                if (y < yMin) yMin = y;\r\n            }\r\n        }\r\n        \r\n        var yScale = d3.scale.linear()\r\n            .domain([yMin, yMax])\r\n            .range([h, 0]);\r\n        var svg = d3.select(el)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n        \r\n        var area = d3.svg.area()\r\n            .x(function(d, i) { return xScale(i); })\r\n            .y0(function(d) { return yScale(d - props.data.stddev * stddevfactor); })\r\n            .y1(function(d) { return yScale(d + props.data.stddev * stddevfactor); });\r\n        svg.append(\"path\")\r\n            .attr(\"class\", \"tchart-area\")\r\n            .attr(\"d\", area(props.data.predicted));\r\n        \r\n        if (showForecast) {\r\n            var lastPredictedIndex = props.data.predicted.length - 1;\r\n            var lastPredictedValue = props.data.predicted[lastPredictedIndex];\r\n            var lastPredictedStd = props.data.stddev;\r\n            var forecastValues = [lastPredictedValue].concat(props.data.forecast.values);\r\n            var forecastStds = [lastPredictedStd].concat(props.data.forecast.std);\r\n                                       \r\n            var forecastArea = d3.svg.area()\r\n                .x(function(d, i) { return xScale(lastPredictedIndex + i); })\r\n                .y0(function(d, i) { return yScale(d - forecastStds[i] * stddevfactor); })\r\n                .y1(function(d, i) { return yScale(d + forecastStds[i] * stddevfactor); });\r\n            svg.append(\"path\")\r\n                .attr(\"class\", \"tchart-area-forecast\")\r\n                .attr(\"d\", forecastArea(forecastValues));\r\n        }\r\n            \r\n        var tickVals = [];\r\n        var tickLabels = [];\r\n        for(var i = 0; i < length; i++) {\r\n            var date = props.startDate + i;\r\n            if(date % 12 === 0) {\r\n                tickVals.push(i);\r\n                tickLabels.push('' + (1970 + Math.floor(date / 12)));\r\n            }\r\n        }\r\n        var xAxis = d3.svg.axis()\r\n            .scale(xScale)\r\n            .orient(\"bottom\")\r\n            .tickSize(-h, 0)\r\n            .tickPadding(6)\r\n            .tickValues(tickVals)\r\n            .tickFormat(function(d, i) {\r\n                return tickLabels[i];\r\n            });\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"hdr-x tchart-axis\")\r\n            .attr(\"transform\", \"translate(0,\" + h + \")\")\r\n            .call(xAxis);\r\n\r\n        var yAxis = d3.svg.axis()\r\n            .scale(yScale)\r\n            .tickSize(0, 0)\r\n            .tickFormat(function(d, i) {\r\n                if (d == yMin) return '';\r\n                if(d < 1000) return d;\r\n                if(d < 10000) return Math.round(d / 100) / 10 + ' K';\r\n                if(d < 1000000) return (d / 1000).toFixed(0) + ' K';\r\n                if(d < 10000000) return Math.round(d / 100000) / 10 + ' M';\r\n                return (d / 1000000).toFixed(0) + ' M';\r\n            })\r\n            .orient(\"left\");\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"hdr-y tchart-axis\")\r\n            .call(yAxis);\r\n\r\n        var line = d3.svg.line()\r\n            .x(function(d, i) { return xScale(i); })\r\n            .y(function(d) { return yScale(d); });\r\n        svg.append(\"path\")\r\n            .attr(\"class\", \"tchart-actual\")\r\n            .attr(\"d\", line(props.data.actual));\r\n        \r\n        var selectedMetric = MetricMdl.getMetric();\r\n        var showSelectedChart = ShowSelectedChartMdl.getShowSelectedChart();\r\n/*       if (this.props.title == selectedMetric && showSelectedChart == 'On') {\r\n            var i = DateRangeMdl.getRangeStart() - props.startDate;\r\n            var d = props.data.actual[i];\r\n            svg.append(\"circle\")\r\n                .attr(\"cx\", xScale(i))\r\n                .attr(\"cy\", yScale(d))\r\n                .attr(\"r\", 3)\r\n                .attr(\"fill\", \"rgba(255,0,0,0.5)\");\r\n        } */\r\n        \r\n    },\r\n\r\n    render: function() {\r\n        var className = 'tchart';\r\n        var selectedMetric = MetricMdl.getMetric();\r\n        var showSelectedChart = ShowSelectedChartMdl.getShowSelectedChart();\r\n        if (this.props.title == selectedMetric && showSelectedChart == 'On') {\r\n            className = 'tchart-selected-metric';\r\n        }\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: this.props.id, className: className}, \r\n                React.DOM.p({className: \"tchart-title\"}, this.props.title + ' - ' + this.state.selectedCvg), \r\n                React.DOM.svg({className: \"tchart-svg\", ref: \"svg\"})\r\n            )\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            selectedCvg: CoverageMdl.getCoverage()\r\n        };\r\n    },\r\n    componentDidMount: function() {\r\n        CoverageMdl.onChange(this.onCvgChange);\r\n        this.drawChart(this.refs.svg.getDOMNode(), this.props);\r\n    },\r\n    shouldComponentUpdate: function() {\r\n        this.drawChart(this.refs.svg.getDOMNode(), this.props);\r\n        return false;\r\n    },\r\n    componentWillUnmount: function() {\r\n        CoverageMdl.offChange(this.onCvgChange);\r\n    },\r\n    onCvgChange: function() {\r\n        this.setState({\r\n            selectedCvg: CoverageMdl.getCoverage()\r\n        });\r\n    }\r\n});\r\n",
    "\"use strict\";\n/** @jsx React.DOM */\r\nvar SuperAgent = window.superagent;\r\nvar SelectStateAction = require('../action/selectStateAction');\r\nvar StateMdl = require('../model/stateMdl');\r\nvar OverviewDataMdl = require('../model/overviewDataMdl');\r\nvar MetricMdl = require('../model/metricMdl');\r\nvar CoverageMdl = require('../model/coverageMdl');\r\nvar DateRangeMdl = require('../model/dateRangeMdl');\r\nvar HorizonMdl = require('../model/horizonMdl');\r\nvar PeriodMdl = require('../model/periodMdl');\r\nvar ShowSelectedChartMdl = require('../model/showSelectedChartMdl');\r\nvar Util = require('../core/util');\r\nvar States = require('../model/states');\r\nvar DataColors = require('./dataColors');\r\n\r\nvar cloneToDoc = function(node,doc){\r\n    if(!doc) doc=document;\r\n    var i, len;\r\n    var clone = doc.createElementNS(node.namespaceURI,node.nodeName);\r\n    for(i=0,len=node.attributes.length; i<len; ++i) {\r\n        var a = node.attributes[i];\r\n        if(/^xmlns\\b/.test(a.nodeName)) continue; // IE can't create these\r\n        clone.setAttributeNS(a.namespaceURI,a.nodeName,a.nodeValue);\r\n    }\r\n    for(i=0,len=node.childNodes.length; i<len; ++i){\r\n        var c = node.childNodes[i];\r\n        clone.insertBefore(c.nodeType==1 ? cloneToDoc(c,doc) : doc.createTextNode(c.nodeValue), null);\r\n    }\r\n    return clone;\r\n};\r\n\r\nmodule.exports = React.createClass({displayName: 'UsMap',\r\n\r\n    mapUnscaledWidth: 961.84375,\r\n    mapUnscaledHeight: 582.625,\r\n\r\n    drawMap: function(el, props) {\r\n        var that = this;\r\n        d3.selectAll(el.childNodes).remove();\r\n        SuperAgent.get('map.svg').end(function(err, resp) {\r\n            if(err) console.log(\"err1 \" + err);\r\n            else if(resp.error) console.log(\"err2 \" + resp.error);\r\n            else {\r\n                var node = cloneToDoc(resp.xhr.responseXML.documentElement);\r\n                el.appendChild(node);\r\n                var svg = d3.select('#map-svg');\r\n                // add handlers directly, not using D3, has to do with evt handlers on <g>\r\n                // try pointer-events:all\r\n                svg.selectAll('.usmap-state,.usmap-label,.usmap-callout')\r\n                    .on('mouseenter', function() { that.hoverOn(this); })\r\n                    .on('mouseleave', function() { that.hoverOff(this); })\r\n                    .on('mousedown', function() { that.navToState(this); }); // click does not work in IE\r\n                that.renderData();\r\n                that.windowResized();\r\n            }\r\n        });\r\n    },\r\n\r\n    renderData: function() {\r\n        var svg = d3.select('#map-svg');\r\n        if(!svg[0][0]) return; // SVG element not yet added\r\n        var data = OverviewDataMdl.getData();\r\n        if(!data) return; // data not yet loaded\r\n        var metric = MetricMdl.getMetric();\r\n        if(metric === null) metric = data.metricsNames[0];\r\n        var metricData = data.metrics[metric];\r\n        var cvg = CoverageMdl.getCoverage();\r\n        if(cvg === null) cvg = data.coverages[0];\r\n        var cvgData = metricData[cvg];\r\n        for(var state in States) {\r\n            var stateName = States[state];\r\n            var stateData = cvgData[stateName.toUpperCase()];\r\n            \r\n            if (stateData) {\r\n\r\n                // compute the mean of values for the time range\r\n                var rangeSz = DateRangeMdl.getRangeSize();\r\n                var moIdx = DateRangeMdl.getRangeStart() - data.startDate + data.startDateOffset;\r\n                var valueCt = 0;\r\n                var valueTotal = 0;\r\n                for(var i = 0; i < rangeSz; i++) {\r\n                    if(moIdx >= stateData.length) break;\r\n                    valueTotal += stateData[moIdx];\r\n                    valueCt++;\r\n                    moIdx++;\r\n                }\r\n                var value = valueTotal / valueCt;\r\n\r\n                if (value) var color = DataColors.scale(value);\r\n                else var color = 'rgb(248,246,243)';\r\n\r\n                svg.selectAll('#' + state + ' .usmap-state').attr('style', 'fill:' + color);\r\n                svg.select('#' + state + ' .usmap-callout').attr('style', 'fill:' + color);\r\n                \r\n            }\r\n        }\r\n    },\r\n\r\n    render: function() {\r\n        return (\r\n            /*jshint ignore:start */\r\n            React.DOM.div({id: \"usmap\", ref: \"mapdiv\"})\r\n            /*jshint ignore:end */\r\n        );\r\n    },\r\n\r\n    componentDidMount: function() {\r\n        this.drawMap(this.getDOMNode(), this.props);\r\n\r\n        MetricMdl.onChange(this.renderData);\r\n        CoverageMdl.onChange(this.renderData);\r\n        OverviewDataMdl.onChange(this.renderData);\r\n        DateRangeMdl.onChange(this.renderData);\r\n\r\n        if(!this.resizeHandler) this.resizeHandler = Util.debounce(this.windowResized, 300);\r\n        window.addEventListener('resize', this.resizeHandler);\r\n    },\r\n\r\n    shouldComponentUpdate: function() {\r\n        return false;\r\n    },\r\n\r\n    componentWillUnmount: function() {\r\n        MetricMdl.offChange(this.renderData);\r\n        CoverageMdl.offChange(this.renderData);\r\n        OverviewDataMdl.offChange(this.renderData);\r\n        DateRangeMdl.offChange(this.renderData);\r\n        window.removeEventListener('resize', this.resizeHandler);\r\n    },\r\n\r\n    windowResized: function() {\r\n        var svg = d3.select('#map-svg');\r\n        if(!svg[0][0]) return; // SVG element not yet added\r\n\r\n        var availWidth = document.body.clientWidth - 310; // margins and filter area add to 310px width\r\n        var scale = availWidth / this.mapUnscaledWidth;\r\n        svg.select('#scaledGrp').attr('transform', 'scale(' + scale + ')');\r\n        svg.attr('width', this.mapUnscaledWidth * scale).attr('height', this.mapUnscaledHeight * scale);\r\n    },\r\n\r\n    // when moving node to the top, mouseleave no longer works in IE\r\n    \r\n    hoverOn: function(el) {\r\n        /*\r\n        var stateNode = el.parentNode;\r\n        var groupNode = stateNode.parentNode;\r\n        groupNode.removeChild(stateNode);\r\n        groupNode.appendChild(stateNode);\r\n        d3.select(stateNode).classed('state-hover', true);\r\n        */\r\n    },\r\n\r\n    hoverOff: function(el) {\r\n        /*\r\n        var stateNode = el.parentNode;\r\n        d3.select(stateNode).classed('state-hover', false);\r\n        */\r\n    },\r\n\r\n    navToState: function(el) {\r\n        ShowSelectedChartMdl.setShowSelectedChart('On');\r\n        var horizon = HorizonMdl.getHorizon();\r\n        var period = PeriodMdl.getPeriod();\r\n        var stateNode = el.parentNode;\r\n        SelectStateAction.exec(horizon, period, stateNode.id);\r\n        return false;\r\n    }\r\n});\r\n"
  ]
}